name: Deploy Backend

# develop/master 브랜치에 push되거나 PR이 생성될 때 실행
on:
  push:
    branches: [ develop, master ]  # develop(dev환경), master(prod환경) 브랜치 지원
  pull_request:
    branches: [ develop, master ]  # PR 생성 시 테스트만 실행

env:
  AWS_REGION: ap-northeast-2

jobs:
  # 빌드 및 배포 (develop/master 브랜치 push 시에만 실행)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: AWS  # AWS 환경 사용
    # develop 또는 master 브랜치에 push될 때만 배포 (PR 머지 완료 후)
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract Jira ticket from commit
      id: jira-ticket
      run: |
        echo "🔍 Extracting Jira ticket..."
        echo "Commit message: '${{ github.event.head_commit.message }}'"
        
        # 커밋 메시지에서 FABLINK-XXX 패턴 추출
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        JIRA_TICKET=$(echo "$COMMIT_MSG" | grep -oE 'FABLINK-[0-9]+' | head -1)
        echo "Method 1 result: '$JIRA_TICKET'"
        
        # 만약 커밋 메시지에 없으면 머지 커밋에서 추출 시도
        if [ -z "$JIRA_TICKET" ]; then
          # 머지 커밋 메시지 형태: "Merge pull request #XX from user/FABLINK-152"
          JIRA_TICKET=$(echo "$COMMIT_MSG" | sed -n 's/.*from [^/]*\/\(FABLINK-[0-9]\+\).*/\1/p')
          echo "Method 2 result: '$JIRA_TICKET'"
        fi
        
        # 여전히 없으면 기본값 사용
        if [ -z "$JIRA_TICKET" ]; then
          JIRA_TICKET="FABLINK-Unknown"
          echo "Fallback: '$JIRA_TICKET'"
        fi
        
        echo "JIRA_TICKET=$JIRA_TICKET" >> $GITHUB_OUTPUT
        echo "🎫 Final Jira ticket: $JIRA_TICKET"

    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "🎯 Deploying to PRODUCTION environment"
          echo "ECR_REPOSITORY=fablink-backend" >> $GITHUB_ENV
          echo "EKS_CLUSTER_NAME=fablink-cluster-prod" >> $GITHUB_ENV
          echo "KUBERNETES_NAMESPACE=fablink-prod" >> $GITHUB_ENV
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "API_GATEWAY_URL=https://bjqxlrmmi6.execute-api.ap-northeast-2.amazonaws.com/prod" >> $GITHUB_ENV
        else
          echo "🎯 Deploying to DEVELOPMENT environment"
          echo "ECR_REPOSITORY=fablink-backend-dev" >> $GITHUB_ENV
          echo "EKS_CLUSTER_NAME=fablink-cluster-dev" >> $GITHUB_ENV
          echo "KUBERNETES_NAMESPACE=fablink-dev" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "API_GATEWAY_URL=https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com" >> $GITHUB_ENV
        fi

    - name: Debug AWS credentials
      run: |
        echo "🔍 Checking AWS credentials setup..."
        echo "AWS_ACCESS_KEY_ID exists: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "AWS_SECRET_ACCESS_KEY exists: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        echo "AWS_REGION: ${{ env.AWS_REGION }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "ECR Repository: ${{ env.ECR_REPOSITORY }}"
        echo "EKS Cluster: ${{ env.EKS_CLUSTER_NAME }}"
        echo "Namespace: ${{ env.KUBERNETES_NAMESPACE }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🔨 Building Docker image for ${{ env.ENVIRONMENT }} environment..."
        echo "📦 Image will be tagged as: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Build and push image
        docker buildx build \
          --platform linux/amd64 \
          --build-arg ENV=${{ env.ENVIRONMENT }} \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push .
        
        echo "✅ Docker image pushed successfully!"

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        echo "🔧 Configuring kubectl for EKS cluster..."
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🚀 Deploying to ${{ env.ENVIRONMENT }} environment..."
        echo "🎯 Target: $KUBERNETES_NAMESPACE namespace"
        
        # Update deployment image
        kubectl set image deployment/fablink-backend \
          fablink-backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -n $KUBERNETES_NAMESPACE

        echo "⏳ Waiting for rollout to complete..."
        # Wait for rollout to complete
        kubectl rollout status deployment/fablink-backend -n $KUBERNETES_NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check pod status
        echo "📊 Pod Status:"
        kubectl get pods -n $KUBERNETES_NAMESPACE -l app=fablink-backend
        
        # Check service status
        echo "🌐 Service Status:"
        kubectl get svc -n $KUBERNETES_NAMESPACE
        
        # Wait a bit for pod to be ready
        sleep 10
        
        # Test health endpoint
        echo "🏥 Testing health endpoint..."
        kubectl exec -n $KUBERNETES_NAMESPACE \
          deployment/fablink-backend -- \
          curl -f http://localhost:8000/health/ || exit 1
        
        echo "✅ Health check passed!"

    - name: Deployment Summary
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo ""
          echo "🎉 =================================="
          echo "✅ ${{ env.ENVIRONMENT }} Environment Deployment SUCCESS!"
          echo "=================================="
          echo "🔗 API Gateway: ${{ env.API_GATEWAY_URL }}"
          echo "📚 Swagger UI: ${{ env.API_GATEWAY_URL }}/api/docs/"
          echo "📖 ReDoc: ${{ env.API_GATEWAY_URL }}/api/redoc/"
          echo "🏥 Health Check: ${{ env.API_GATEWAY_URL }}/health/"
          echo "📊 Ready Check: ${{ env.API_GATEWAY_URL }}/ready/"
          echo ""
          echo "🐳 Docker Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "🏷️  Git Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "🎯 Environment: ${{ env.ENVIRONMENT }}"
          echo "=================================="
        else
          echo ""
          echo "❌ =================================="
          echo "💥 ${{ env.ENVIRONMENT }} Environment Deployment FAILED!"
          echo "=================================="
          echo "🔍 Please check the logs above for details."
          echo "🐛 Debug steps:"
          echo "   1. Check pod logs: kubectl logs -n ${{ env.KUBERNETES_NAMESPACE }} deployment/fablink-backend"
          echo "   2. Check pod status: kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}"
          echo "   3. Check events: kubectl get events -n ${{ env.KUBERNETES_NAMESPACE }}"
          echo "=================================="
          exit 1
        fi

    - name: Send Slack notification
      if: always()  # 성공/실패 관계없이 실행
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#개발-알림'  # 슬랙 채널명 (실제 채널명으로 변경)
        text: |
          🚀 Backend 배포 알림
          
          📋 지라 티켓: <https://fablink.atlassian.net/jira/software/projects/FABLINK/boards/1/timeline?selectedIssue=${{ steps.jira-ticket.outputs.JIRA_TICKET }}|${{ steps.jira-ticket.outputs.JIRA_TICKET }}>
          💬 작업(커밋) 내용: ${{ github.event.head_commit.message }}
          🌿 브랜치: ${{ github.ref_name }}
          🎯 환경: ${{ env.ENVIRONMENT }}
          👤 작업자: ${{ github.actor }}
          📅 시간: ${{ github.event.head_commit.timestamp }}
          
          ${{ job.status == 'success' && '✅ 배포 성공!' || '❌ 배포 실패!' }}
          
          ${{ job.status == 'success' && format('🔗 API: {0}', env.API_GATEWAY_URL) || '🔍 로그를 확인해주세요.' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
