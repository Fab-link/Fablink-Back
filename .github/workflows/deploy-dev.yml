name: Deploy to Dev Environment

# develop 브랜치에 push되거나 PR이 생성될 때 실행
on:
  push:
    branches: [ develop ]  # develop 브랜치에 머지될 때 자동 배포
  pull_request:
    branches: [ develop ]  # develop 브랜치로의 PR 생성 시 테스트만 실행

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: fablink-backend-dev
  EKS_CLUSTER_NAME: fablink-cluster-dev
  KUBERNETES_NAMESPACE: fablink-dev

jobs:
  # 1단계: 테스트 실행 (PR과 push 모두에서 실행)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_fablink
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt

    - name: Set test environment variables
      run: |
        # 테스트용 환경변수 설정
        export DJANGO_ENV=test
        export SECRET_KEY=test-secret-key-for-github-actions
        export DEBUG=True
        export DB_ENGINE=django.db.backends.postgresql
        export DB_NAME=test_fablink
        export DB_USER=postgres
        export DB_PASSWORD=postgres
        export DB_HOST=localhost
        export DB_PORT=5432
        export ALLOWED_HOSTS=localhost,127.0.0.1
        export CORS_ALLOWED_ORIGINS=http://localhost:3000
        export USE_DYNAMODB=False
        export USE_S3=False
        
        # 환경변수를 GitHub Actions 환경에 저장
        echo "DJANGO_ENV=test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.postgresql" >> $GITHUB_ENV
        echo "DB_NAME=test_fablink" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
        echo "CORS_ALLOWED_ORIGINS=http://localhost:3000" >> $GITHUB_ENV
        echo "USE_DYNAMODB=False" >> $GITHUB_ENV
        echo "USE_S3=False" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        echo "🧪 Running Django tests..."
        python manage.py test
        echo "✅ All tests passed!"

    - name: Check code syntax
      run: |
        echo "🔍 Checking Python syntax..."
        python -m py_compile $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./node_modules/*")
        echo "✅ Syntax check passed!"

  # 2단계: 빌드 및 배포 (develop 브랜치 push 시에만 실행)
  build-and-deploy:
    name: Build and Deploy to Dev
    runs-on: ubuntu-latest
    needs: test
    # develop 브랜치에 push될 때만 배포 (PR 머지 완료 후)
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🔨 Building Docker image for Dev environment..."
        echo "📦 Image will be tagged as: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Build and push image
        docker buildx build \
          --platform linux/amd64 \
          --build-arg ENV=dev \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push .
        
        echo "✅ Docker image pushed successfully!"

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        echo "🔧 Configuring kubectl for EKS cluster..."
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🚀 Deploying to Dev environment..."
        echo "🎯 Target: $KUBERNETES_NAMESPACE namespace"
        
        # Update deployment image
        kubectl set image deployment/fablink-backend \
          fablink-backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -n $KUBERNETES_NAMESPACE

        echo "⏳ Waiting for rollout to complete..."
        # Wait for rollout to complete
        kubectl rollout status deployment/fablink-backend -n $KUBERNETES_NAMESPACE --timeout=300s

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check pod status
        echo "📊 Pod Status:"
        kubectl get pods -n $KUBERNETES_NAMESPACE -l app=fablink-backend
        
        # Check service status
        echo "🌐 Service Status:"
        kubectl get svc -n $KUBERNETES_NAMESPACE
        
        # Wait a bit for pod to be ready
        sleep 10
        
        # Test health endpoint
        echo "🏥 Testing health endpoint..."
        kubectl exec -n $KUBERNETES_NAMESPACE \
          deployment/fablink-backend -- \
          curl -f http://localhost:8000/health/ || exit 1
        
        echo "✅ Health check passed!"

    - name: Deployment Summary
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo ""
          echo "🎉 =================================="
          echo "✅ Dev Environment Deployment SUCCESS!"
          echo "=================================="
          echo "🔗 API Gateway: https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com/"
          echo "📚 Swagger UI: https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com/api/docs/"
          echo "📖 ReDoc: https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com/api/redoc/"
          echo "🏥 Health Check: https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com/health/"
          echo "📊 Ready Check: https://8wwdg03sr6.execute-api.ap-northeast-2.amazonaws.com/ready/"
          echo ""
          echo "🐳 Docker Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "🏷️  Git Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "=================================="
        else
          echo ""
          echo "❌ =================================="
          echo "💥 Dev Environment Deployment FAILED!"
          echo "=================================="
          echo "🔍 Please check the logs above for details."
          echo "🐛 Debug steps:"
          echo "   1. Check pod logs: kubectl logs -n ${{ env.KUBERNETES_NAMESPACE }} deployment/fablink-backend"
          echo "   2. Check pod status: kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}"
          echo "   3. Check events: kubectl get events -n ${{ env.KUBERNETES_NAMESPACE }}"
          echo "=================================="
          exit 1
        fi
